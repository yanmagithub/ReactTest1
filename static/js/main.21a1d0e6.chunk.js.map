{"version":3,"sources":["assets/logo.svg","components/Scene/Scene.js","components/App/App.js","store/actions.js","components/App/AppContainer.js","serviceWorker.js","store/reducers.js","index.js","store/configureStore.js"],"names":["module","exports","__webpack_require__","p","Scene","scene","camera","modelData","_this2","this","react_default","a","createElement","style","width","height","ref","el","container","_this3","renderer","THREE","antialias","setSize","window","innerWidth","innerHeight","initializeScene","initializeModels","appendChild","domElement","animate","requestAnimationFrame","render","nextProps","props","color","globe","material","setHex","background","position","z","controls","OrbitControls","enabled","maxDistance","minDistance","geometry","light_a","add","console","log","GLTFLoader","load","gltf","undefined","error","materials","faceMaterial","mesh","set","scale","Component","styles","App","className","components_Scene_Scene","actions","increment","type","decrement","connect","state","dispatch","Increment_Click","Actions","Decrement_Click","Boolean","location","hostname","match","initialState","fuga","reducer","arguments","length","store","createStore","ReactDOM","es","AppContainer","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.21a1d0e6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport GLTFLoader from 'three-gltf-loader';\r\nimport OrbitControls from \"orbit-controls-es6\";\r\n\r\nclass Scene extends Component {\r\n\tscene = null;\r\n\tcamera = null;\r\n\tmodelData = null;\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t<div\r\n\t\t\tstyle={{\r\n\t\t\twidth: \"100vw\",\r\n\t\t\theight: \"100vh\"\r\n\t\t\t}}\r\n\t\t\tref={el => (this.container = el)}\r\n\t\t/>\r\n\t\t);\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst renderer = new THREE.WebGLRenderer({ antialias: true });\r\n\t\trenderer.setSize(window.innerWidth, window.innerHeight);\r\n\t\t//renderer.setClearColor(0xffffff, 1.0);\r\n\r\n\t\t// const dom = document.getElementById(\"three\");\r\n\t\t// dom.appendChild(renderer.domElement);\r\n\r\n\t\tthis.initializeScene(renderer);\r\n\r\n\t\tthis.initializeModels();\r\n\r\n\t\t// let isMapView = false;\r\n\t\tconst animate = () => {\r\n\t\t\trequestAnimationFrame(animate);\r\n\t\t//   const zoom = controls.object.position.distanceTo(controls.target);\r\n\t\t//   if (zoom <= 2 && !isMapView) {\r\n\t\t//     // when we reach a specified zoom level, switch to map view\r\n\t\t//     this.props.onZoomEnd();\r\n\t\t//     controls.dispose();\r\n\t\t//     isMapView = true;\r\n\t\t//   }\r\n\t\t\trenderer.render(this.scene, this.camera);\r\n\t\t};\r\n\t\tthis.container.appendChild(renderer.domElement);\r\n\r\n\t\tanimate();\r\n\t}\r\n\r\n\tshouldComponentUpdate() {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tcomponentWillReceiveProps(nextProps) {\r\n\t\tif (this.props.color !== nextProps.color) {\r\n\t\t\tthis.globe.material.color.setHex(nextProps.color);\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t}\r\n\r\n\tinitializeScene(renderer)\r\n\t{\r\n\t\tconst scene = new THREE.Scene();\r\n\t\tscene.background = new THREE.Color(0x222222);\r\n\t\r\n\t\tconst camera = new THREE.PerspectiveCamera(\r\n\t\t\t50,\r\n\t\t\twindow.innerWidth / window.innerHeight,\r\n\t\t\t0.1,\r\n\t\t\t1000\r\n\t\t);\r\n\t\tcamera.position.z = 0.5;\r\n\r\n\t\tconst controls = new OrbitControls(camera, renderer.domElement);\r\n\t\tcontrols.enabled = true;\r\n\t\tcontrols.maxDistance = 1500;\r\n\t\tcontrols.minDistance = 0;\r\n\r\n\t\tconst geometry = new THREE.SphereGeometry();\r\n\t\tconst material = new THREE.MeshNormalMaterial({\r\n\t\t\tcolor: 0x00ff00\r\n\t\t});\r\n\r\n\t\tconst globe = new THREE.Mesh(geometry, material);\r\n\t\t//scene.add(globe);\r\n\r\n\t\t// const light_p = new THREE.PointLight(0xffffff);\r\n\t\t// light_p.position.set(10, 10, 10);\r\n\t\t// scene.add(light_p);\r\n\t\tconst light_a = new THREE.AmbientLight(0xffffff);\r\n\t\tscene.add(light_a);\r\n\r\n\t\tthis.scene = scene;\r\n\t\tthis.camera = camera;\r\n\t\tthis.globe = globe;\r\n\t}\r\n\r\n\tinitializeModels()\r\n\t{\r\n\t\tvar scene = this.scene;\r\n\t\t\tconsole.log(\"pass1:duck4\");\r\n\t\t\tconst loader = new GLTFLoader();\r\n\t\t\tloader.load( './assets/models/gltf/Avocado.glb', function ( gltf ) {\r\n\t\t\t\tscene.add( gltf.scene );\r\n\t\t\t}, undefined, function ( error ) {\r\n\t\t\t\tconsole.error( error );\r\n\t\t\t} );\r\n\t}\r\n\r\n\tonCompleteLoad( geometry, materials )\r\n\t{\r\n\t\tvar faceMaterial = new THREE.MeshFaceMaterial( materials );\r\n\t\tvar materialColor = 0xff8700; // マテリアルの色\r\n\t\tfaceMaterial.materials[0].color = new THREE.Color(materialColor); // マテリアルの色の設定\r\n\t\t//faceMaterial.materials[0].wireframe = true; // ワイヤーフレーム表示にする\r\n\r\n\t\tvar mesh = new THREE.Mesh( geometry, faceMaterial );\r\n\t\tmesh.position.set( 0,0,0); // 位置の設定\r\n\t\tmesh.scale.set( 10, 10, 10 ); // スケールの設定\r\n\r\n\t\tthis.scene.add( mesh ); // シーンへメッシュの追加\r\n\r\n\t\tconsole.log(\"loaded!\");\r\n\t}\r\n}\r\n\r\nexport default Scene;\r\n","import React, { Component } from 'react';\nimport logo from '../../assets/logo.svg';\nimport '../../css/App.css';\nimport Scene from \"../Scene/Scene\";\n\nconst styles = {\n  width: \"100vw\",\n  height: \"100vh\"\n};\n\n// \nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\" style={styles}>\n          <Scene />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export default {\r\n  increment: () => {\r\n    return { type: \"INC\" }\r\n  },\r\n  decrement: () => {\r\n    return { type: \"DEC\" }\r\n  }\r\n}\r\n","import App from './App';\r\nimport { connect } from 'react-redux';\r\nimport Actions from '../../store/actions'\r\n\r\nfunction mapStateToProps(state) {\r\n  return {state};\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n\treturn {\r\n\t  Increment_Click: () => { dispatch(Actions.increment())},\r\n\t  Decrement_Click: () => { dispatch(Actions.decrement())}\r\n\t}\r\n  }\r\n  \r\n//export default App;\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// 初期ステート設定\r\nconst initialState = {\r\n  fuga: 0\r\n}\r\n\r\n// actionに応じてステート変更\r\nexport default function reducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case 'INC': {\r\n      return { fuga: state.fuga + 1 }\r\n    }\r\n    case 'DEC': {\r\n      return { fuga: state.fuga - 1 }\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport AppContainer from './components/App/AppContainer';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport configureStore from './store/configureStore';\n\nconst store = configureStore();\n\nReactDOM.render(\n    <Provider store={store}>\n        <AppContainer />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore } from 'redux';\r\nimport reducer from './reducers';\r\n\r\nexport default function configureStore() {\r\n    const store = createStore(reducer);\r\n    return store;\r\n}\r\n"],"sourceRoot":""}